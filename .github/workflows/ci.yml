name: CI Pipeline

on:
  push:
  pull_request:

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: realworld
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/realworld?schema=public
      JWT_SECRET: test_jwt_secret
      NODE_ENV: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - run: npm ci
      - run: npx prisma generate

      - name: Apply Migrations
        run: npx prisma migrate deploy

      - name: Seed database
        run: npx prisma db seed

      - run: npm run build
  sast:
    name: Static Security Analysis (Semgrep)
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - uses: actions/checkout@v4

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep Scan
        run: semgrep --config=p/owasp-top-ten --error
  sca:
    name: Dependency Vulnerability Scan (Trivy)
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - uses: actions/checkout@v4

      - name: Scan for High/Critical Vulnerabilities
        uses: aquasecurity/trivy-action@0.23.0
        with:
          scan-type: fs
          severity: CRITICAL,HIGH
          exit-code: 1
          ignore-unfixed: true
  
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: docker build -t realworld-api .
      - name: Run API Container (SQLite)
        run: |
          docker run -d --name api -p 3000:3000 \
          -e DATABASE_URL="file:./dev.db" \
          -e JWT_SECRET="test_secret" \
          realworld-api

      - name: Wait for API to be ready
        run: |
          for i in {1..50}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/articles || true)
            if [ "$STATUS" = "200" ]; then
              exit 0
            fi
            sleep 3
          done
          exit 1
  dast:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000/api/'
          fail_action: true


